commit fb63afbbc2724bf1ebe70c729ce6f766f32fea4f
Author: Murphy Xu - A50759 <Murphy.Xu@microchip.com>
Date:   Tue Dec 28 11:49:08 2021 +0800

    1.fixed descriptor error 2. change feedback policy

diff --git a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
index fd54873..b87ded9 100644
--- a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
+++ b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
@@ -279,9 +279,9 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x01,                            // One packet per frame.(bInterval)
     0x00,                            // Unused. (bRefresh)
 #ifdef USB_AUDIO_FEEDUP_ENABLE
-    0x00,                            // Unused. (bSynchAddress)
+    AUDIO_FEED_UP_EP,                            // Unused. (bSynchAddress)
 #else
-	AUDIO_FEED_UP_EP,
+	0x00,
 #endif
 
 

commit 0702c7391e90debcef9d749bd8f66bd99bc4e481
Author: Murphy Xu - A50759 <Murphy.Xu@microchip.com>
Date:   Mon Dec 27 18:03:42 2021 +0800

    async can work

diff --git a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
index 51f76bf..fd54873 100644
--- a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
+++ b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
@@ -106,7 +106,7 @@ const USB_DEVICE_DESCRIPTOR deviceDescriptor =
 
 
 
-// #define USB_AUDIO_FEEDUP_ENABLE 
+
 #define AUDIO_PACKET_SZE(frq)          (uint8_t)(((frq * 2 * 2)/1000) & 0xFF), \
                                        (uint8_t)((((frq * 2 * 2)/1000) >> 8) & 0xFF)
 #define SAMPLE_FREQ(frq)               (uint8_t)(frq), (uint8_t)((frq >> 8)), (uint8_t)((frq >> 16))
@@ -114,8 +114,7 @@ const USB_DEVICE_DESCRIPTOR deviceDescriptor =
 #define USB_ENDPOINT_SYNC_TYPE_ASYNC                0x04
 #define AUDIO_FEED_UP_EP                     0x82
 #define FEED_RATE 3
-#define USBD_AUDIO_MAX_FREQ 48000
-#define USB_MAX_RX_SIZE                 ( AUDIO_PACKET_SZE(USBD_AUDIO_MAX_FREQ)*2 )
+
 
 
 #ifdef USB_AUDIO_FEEDUP_ENABLE 
@@ -135,7 +134,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
 
     0x09,                                                   // Size of this descriptor in bytes
     USB_DESCRIPTOR_CONFIGURATION,                           // Descriptor Type
-    USB_DEVICE_16bitTo8bitArrange(110+FEEDUP_EP_SIZE),       //(110 Bytes)Size of the Configuration descriptor
+    USB_DEVICE_16bitTo8bitArrange((110+FEEDUP_EP_SIZE)),       //(110 Bytes)Size of the Configuration descriptor
     2,                                                      // Number of interfaces in this configuration
     0x01,                                                   // Index value of this configuration
     0x00,                                                   // Configuration string index
@@ -233,7 +232,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x01,                            // Alternate Setting Number (bAlternateSetting)
 
 #ifdef USB_AUDIO_FEEDUP_ENABLE
-	0x02
+	0x02,
 #else
     0x01,                            // Number of endpoints in this intf (bNumEndpoints)
 #endif
@@ -271,7 +270,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     1 | USB_EP_DIRECTION_OUT,                            // Endpoint1:OUT (bEndpointAddress)
 #ifdef USB_AUDIO_FEEDUP_ENABLE
   USB_ENDPOINT_TYPE_ISOCHRONOUS  | USB_ENDPOINT_SYNC_TYPE_ASYNC,        /* bmAttributes */
-  (uint8_t)(USB_MAX_RX_SIZE & 0xff),(uint8_t)((USB_MAX_RX_SIZE>>8)&0xff),	
+  (uint8_t)(USB_MAX_RX_SIZE & 0xff),(uint8_t)((USB_MAX_RX_SIZE>>8)&0xff) ,	
 #else
     0x09,                            /* ?(bmAttributes) Isochronous,Adaptive, data endpoint */
     AUDIO_PACKET_SZE(USBD_AUDIO_MAX_FREQ),   // ?(wMaxPacketSize) //48 * 4
@@ -302,7 +301,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
 	  USB_DESCRIPTOR_ENDPOINT, 			  /* bDescriptorType */
 	  AUDIO_FEED_UP_EP, 				/* bEndpointAddress 2 in endpoint*/
 	  0x11, 							  /* bmAttributes */
-	  3,0,								  /* wMaxPacketSize in Bytes 3 */
+	  8,0,								  /* wMaxPacketSize in Bytes 3 */
 	  1,								  /* bInterval 1ms*/
 	  FEED_RATE,						/* bRefresh 1 ~ 9,host will get feedup evary FEED_RATE power of 2*/
 	  0x00, 							  /* bSynchAddress */

commit 6c99f97dc5f66a94016ba655002db4ac0f007a93
Author: Murphy Xu - A50759 <Murphy.Xu@microchip.com>
Date:   Mon Dec 27 13:27:43 2021 +0800

    fix linux play bug

diff --git a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
index 20294d7..51f76bf 100644
--- a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
+++ b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
@@ -105,6 +105,27 @@ const USB_DEVICE_DESCRIPTOR deviceDescriptor =
 };
 
 
+
+// #define USB_AUDIO_FEEDUP_ENABLE 
+#define AUDIO_PACKET_SZE(frq)          (uint8_t)(((frq * 2 * 2)/1000) & 0xFF), \
+                                       (uint8_t)((((frq * 2 * 2)/1000) >> 8) & 0xFF)
+#define SAMPLE_FREQ(frq)               (uint8_t)(frq), (uint8_t)((frq >> 8)), (uint8_t)((frq >> 16))
+#define USB_ENDPOINT_TYPE_ISOCHRONOUS                 0x01
+#define USB_ENDPOINT_SYNC_TYPE_ASYNC                0x04
+#define AUDIO_FEED_UP_EP                     0x82
+#define FEED_RATE 3
+#define USBD_AUDIO_MAX_FREQ 48000
+#define USB_MAX_RX_SIZE                 ( AUDIO_PACKET_SZE(USBD_AUDIO_MAX_FREQ)*2 )
+
+
+#ifdef USB_AUDIO_FEEDUP_ENABLE 
+	#define FEEDUP_EP_SIZE 0x9
+#else
+	#define FEEDUP_EP_SIZE 0
+#endif
+
+
+
 /*******************************************
  *  USB Full Speed Configuration Descriptor
  *******************************************/
@@ -114,7 +135,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
 
     0x09,                                                   // Size of this descriptor in bytes
     USB_DESCRIPTOR_CONFIGURATION,                           // Descriptor Type
-    USB_DEVICE_16bitTo8bitArrange(110),                      //(110 Bytes)Size of the Configuration descriptor
+    USB_DEVICE_16bitTo8bitArrange(110+FEEDUP_EP_SIZE),       //(110 Bytes)Size of the Configuration descriptor
     2,                                                      // Number of interfaces in this configuration
     0x01,                                                   // Index value of this configuration
     0x00,                                                   // Configuration string index
@@ -135,6 +156,8 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     USB_AUDIO_PR_PROTOCOL_UNDEFINED, // Protocol code  (bInterfaceProtocol)
     0x00,                            // Interface string index (iInterface)
 
+
+
     /* USB Speaker Class-specific AC Interface Descriptor  */
     0x09,                           // Size of this descriptor in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,         // CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -153,6 +176,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     1,                           /* AudioStreaming interface 1 belongs to this
                                      * AudioControl interface. (baInterfaceNr(1))*/
 
+
     /* USB Speaker Input Terminal Descriptor */
     0x0C,                           // Size of the descriptor, in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -165,6 +189,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x00,                           // Unused.(iChannelNames)
     0x00,                           // Unused. (iTerminal)
 
+
     /* USB Speaker Feature Unit Descriptor */
     0x0A,                           // Size of the descriptor, in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -177,6 +202,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x00,                           // (bmaControls(2)) Controls for Channel 2
     0x00,			    //  iFeature
 
+
     /* USB Speaker Output Terminal Descriptor */
     0x09,                           // Size of the descriptor, in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -187,6 +213,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x05,             				// (bSourceID)
     0x00,                           // Unused. (iTerminal)
 
+
     /* USB Speaker Standard AS Interface Descriptor (Alt. Set. 0) */
     0x09,                            // Size of the descriptor, in bytes (bLength)
     USB_DESCRIPTOR_INTERFACE,        // INTERFACE descriptor type (bDescriptorType)
@@ -198,17 +225,25 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x00,                            // Protocol code  (bInterfaceProtocol)
     0x00,                            // Interface string index (iInterface)
 
+
     /* USB Speaker Standard AS Interface Descriptor (Alt. Set. 1) */
     0x09,                            // Size of the descriptor, in bytes (bLength)
     USB_DESCRIPTOR_INTERFACE,        // INTERFACE descriptor type (bDescriptorType)
     1,	 // Interface Number  (bInterfaceNumber)
     0x01,                            // Alternate Setting Number (bAlternateSetting)
+
+#ifdef USB_AUDIO_FEEDUP_ENABLE
+	0x02
+#else
     0x01,                            // Number of endpoints in this intf (bNumEndpoints)
+#endif
+	
     USB_AUDIO_CLASS_CODE,            // Class code  (bInterfaceClass)
     USB_AUDIO_AUDIOSTREAMING,        // Subclass code (bInterfaceSubclass)
     0x00,                            // Protocol code  (bInterfaceProtocol)
     0x00,                            // Interface string index (iInterface)
 
+
     /*  USB Speaker Class-specific AS General Interface Descriptor */
     0x07,                           // Size of the descriptor, in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,     	// CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -217,6 +252,7 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x01,                           // Interface delay. (bDelay)
     0x01,0x00,                      // PCM Format (wFormatTag)
 
+
     /*  USB Speaker Type 1 Format Type Descriptor */
     0x0B,                           // Size of the descriptor, in bytes (bLength)
     USB_AUDIO_CS_INTERFACE,     	// CS_INTERFACE Descriptor Type (bDescriptorType)
@@ -228,16 +264,27 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x01,                           // One frequency supported. (bSamFreqType)
     0x80,0xBB,0x00,                 // Sampling Frequency = 48000 Hz(tSamFreq)
 
+
     /*  USB Speaker Standard Endpoint Descriptor */
     0x09,                            // Size of the descriptor, in bytes (bLength)
     USB_DESCRIPTOR_ENDPOINT,         // ENDPOINT descriptor (bDescriptorType)
     1 | USB_EP_DIRECTION_OUT,                            // Endpoint1:OUT (bEndpointAddress)
-    0x09,                            /* ?(bmAttributes) Isochronous,
-                                      * Adaptive, data endpoint */
-    (192),0x00,                      // ?(wMaxPacketSize) //48 * 4
+#ifdef USB_AUDIO_FEEDUP_ENABLE
+  USB_ENDPOINT_TYPE_ISOCHRONOUS  | USB_ENDPOINT_SYNC_TYPE_ASYNC,        /* bmAttributes */
+  (uint8_t)(USB_MAX_RX_SIZE & 0xff),(uint8_t)((USB_MAX_RX_SIZE>>8)&0xff),	
+#else
+    0x09,                            /* ?(bmAttributes) Isochronous,Adaptive, data endpoint */
+    AUDIO_PACKET_SZE(USBD_AUDIO_MAX_FREQ),   // ?(wMaxPacketSize) //48 * 4
+#endif
+
     0x01,                            // One packet per frame.(bInterval)
     0x00,                            // Unused. (bRefresh)
+#ifdef USB_AUDIO_FEEDUP_ENABLE
     0x00,                            // Unused. (bSynchAddress)
+#else
+	AUDIO_FEED_UP_EP,
+#endif
+
 
     /* USB Speaker Class-specific Isoc. Audio Data Endpoint Descriptor*/
     0x07,                            // Size of the descriptor, in bytes (bLength)
@@ -249,6 +296,20 @@ const uint8_t fullSpeedConfigurationDescriptor[]=
     0x00,0x00,                       // Unused. (wLockDelay)
 
 
+#ifdef USB_AUDIO_FEEDUP_ENABLE
+	  /* ##Endpoint 2 for feedback - Standard Descriptor */
+	  0x09,  							/* bLength */
+	  USB_DESCRIPTOR_ENDPOINT, 			  /* bDescriptorType */
+	  AUDIO_FEED_UP_EP, 				/* bEndpointAddress 2 in endpoint*/
+	  0x11, 							  /* bmAttributes */
+	  3,0,								  /* wMaxPacketSize in Bytes 3 */
+	  1,								  /* bInterval 1ms*/
+	  FEED_RATE,						/* bRefresh 1 ~ 9,host will get feedup evary FEED_RATE power of 2*/
+	  0x00, 							  /* bSynchAddress */
+	  /* 09 byte*/
+#endif
+
+
 
 
 };

commit 26d553c0a7b7a64c9ef0f19048b62d91c55cd111
Author: Murphy Xu - A50759 <Murphy.Xu@microchip.com>
Date:   Mon Dec 27 10:18:36 2021 +0800

    add usb layer codes

diff --git a/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
new file mode 100644
index 0000000..20294d7
--- /dev/null
+++ b/config/apb_sam_e54_ult_wm8904_ssc_sdmmc/usb_device_init_data.c
@@ -0,0 +1,372 @@
+/*******************************************************************************
+  System Initialization File
+
+  File Name:
+    usb_device_init_data.c
+
+  Summary:
+    This file contains source code necessary to initialize the system.
+
+  Description:
+    This file contains source code necessary to initialize the system.  It
+    implements the "SYS_Initialize" function, defines the configuration bits,
+    and allocates any necessary global system resources,
+ *******************************************************************************/
+
+// DOM-IGNORE-BEGIN
+/*******************************************************************************
+* Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
+*
+* Subject to your compliance with these terms, you may use Microchip software
+* and any derivatives exclusively with Microchip products. It is your
+* responsibility to comply with third party license terms applicable to your
+* use of third party software (including open source software) that may
+* accompany Microchip software.
+*
+* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
+* EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
+* WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
+* PARTICULAR PURPOSE.
+*
+* IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
+* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
+* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
+* BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
+* FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
+* ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
+* THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
+ *******************************************************************************/
+// DOM-IGNORE-END
+
+// *****************************************************************************
+// *****************************************************************************
+// Section: Included Files
+// *****************************************************************************
+// *****************************************************************************
+
+#include "configuration.h"
+#include "definitions.h"
+/**************************************************
+ * USB Device Function Driver Init Data
+ **************************************************/
+	const USB_DEVICE_AUDIO_INIT audioInit0 =
+{
+	.queueSizeRead = 2,
+	.queueSizeWrite = 2
+};
+
+
+/**************************************************
+ * USB Device Layer Function Driver Registration 
+ * Table
+ **************************************************/
+const USB_DEVICE_FUNCTION_REGISTRATION_TABLE funcRegistrationTable[1] =
+{
+    
+	/* Audio Function 0 */
+    { 
+        .configurationValue = 1,    /* Configuration value */ 
+        .interfaceNumber = 0,       /* First interfaceNumber of this function */ 
+        .speed = USB_SPEED_HIGH|USB_SPEED_FULL,    /* Function Speed */ 
+        .numberOfInterfaces = 2,    /* Number of interfaces */
+        .funcDriverIndex = 0,  /* Index of Audio Function Driver */
+        .driver = (void*)USB_DEVICE_AUDIO_FUNCTION_DRIVER,    /* USB Audio function data exposed to device layer */
+        .funcDriverInit = (void*)&audioInit0    /* Function driver init data */
+    },
+
+
+};
+
+/*******************************************
+ * USB Device Layer Descriptors
+ *******************************************/
+/*******************************************
+ *  USB Device Descriptor 
+ *******************************************/
+
+const USB_DEVICE_DESCRIPTOR deviceDescriptor =
+{
+    0x12,                                                   // Size of this descriptor in bytes
+    USB_DESCRIPTOR_DEVICE,                                  // DEVICE descriptor type
+    0x0200,                                                 // USB Spec Release Number in BCD format
+    0x00,         // Class Code
+    0x00,         // Subclass code
+    0x00,         // Protocol code
+
+
+    USB_DEVICE_EP0_BUFFER_SIZE,                             // Max packet size for EP0, see configuration.h
+    0x04D8,                                                 // Vendor ID
+    0x00FF,                                                 // Product ID				
+    0x0100,                                                 // Device release number in BCD format
+    0x01,                                                   // Manufacturer string index
+    0x02,                                                   // Product string index
+	0x00,                                                   // Device serial number string index
+    0x01                                                    // Number of possible configurations
+};
+
+
+/*******************************************
+ *  USB Full Speed Configuration Descriptor
+ *******************************************/
+const uint8_t fullSpeedConfigurationDescriptor[]=
+{
+	/* Configuration Descriptor */
+
+    0x09,                                                   // Size of this descriptor in bytes
+    USB_DESCRIPTOR_CONFIGURATION,                           // Descriptor Type
+    USB_DEVICE_16bitTo8bitArrange(110),                      //(110 Bytes)Size of the Configuration descriptor
+    2,                                                      // Number of interfaces in this configuration
+    0x01,                                                   // Index value of this configuration
+    0x00,                                                   // Configuration string index
+    USB_ATTRIBUTE_DEFAULT | USB_ATTRIBUTE_SELF_POWERED, // Attributes
+    100,
+	
+
+    /* Descriptor for Function 1 - Audio     */ 
+    
+    /* USB Speaker Standard Audio Control Interface Descriptor	*/
+    0x09,                            // Size of this descriptor in bytes (bLength)
+    USB_DESCRIPTOR_INTERFACE,        // INTERFACE descriptor type (bDescriptorType)
+    0,                               // Interface Number  (bInterfaceNumber)
+    0x00,                            // Alternate Setting Number (bAlternateSetting)
+    0x00,                            // Number of endpoints in this intf (bNumEndpoints)
+    USB_AUDIO_CLASS_CODE,            // Class code  (bInterfaceClass)
+    USB_AUDIO_AUDIOCONTROL,          // Subclass code (bInterfaceSubclass)
+    USB_AUDIO_PR_PROTOCOL_UNDEFINED, // Protocol code  (bInterfaceProtocol)
+    0x00,                            // Interface string index (iInterface)
+
+    /* USB Speaker Class-specific AC Interface Descriptor  */
+    0x09,                           // Size of this descriptor in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,         // CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_HEADER,               // HEADER descriptor subtype 	(bDescriptorSubtype)
+    0x00,0x01,                      /* Audio Device compliant to the USB Audio
+                                     * specification version 1.00 (bcdADC) */
+    0x28,0x00,                      /* Total number of bytes returned for the
+                                     * class-specific AudioControl interface
+                                     * descriptor. (wTotalLength). Includes the
+                                     * combined length of this descriptor header
+                                     * and all Unit and Terminal descriptors. */
+    1,                           /* The number of AudioStreaming interfaces
+                                     * in the Audio Interface Collection to which
+                                     * this AudioControl interface belongs
+                                     * (bInCollection) */
+    1,                           /* AudioStreaming interface 1 belongs to this
+                                     * AudioControl interface. (baInterfaceNr(1))*/
+
+    /* USB Speaker Input Terminal Descriptor */
+    0x0C,                           // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_INPUT_TERMINAL,	    // INPUT_TERMINAL descriptor subtype (bDescriptorSubtype)
+    0x01,          				    // ID of this Terminal.(bTerminalID)
+    0x01,0x01,                      // (wTerminalType)
+    0x00,                           // No association (bAssocTerminal)
+    0x02,                           // Two Channels (bNrChannels)
+    0x03,0x00,                      // (wChannelConfig)
+    0x00,                           // Unused.(iChannelNames)
+    0x00,                           // Unused. (iTerminal)
+
+    /* USB Speaker Feature Unit Descriptor */
+    0x0A,                           // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_FEATURE_UNIT,         // FEATURE_UNIT  descriptor subtype (bDescriptorSubtype)
+    0x05,            				// ID of this Unit ( bUnitID  ).
+    0x01,          					// Input terminal is connected to this unit(bSourceID)
+    0x01,                           // (bControlSize) //was 0x03
+    0x01,                           // (bmaControls(0)) Controls for Master Channel
+    0x00,                           // (bmaControls(1)) Controls for Channel 1
+    0x00,                           // (bmaControls(2)) Controls for Channel 2
+    0x00,			    //  iFeature
+
+    /* USB Speaker Output Terminal Descriptor */
+    0x09,                           // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,    		// CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_OUTPUT_TERMINAL,      // OUTPUT_TERMINAL  descriptor subtype (bDescriptorSubtype)
+    0x02,          					// ID of this Terminal.(bTerminalID)
+    0x01,0x03,                      // (wTerminalType)See USB Audio Terminal Types.
+    0x00,                           // No association (bAssocTerminal)
+    0x05,             				// (bSourceID)
+    0x00,                           // Unused. (iTerminal)
+
+    /* USB Speaker Standard AS Interface Descriptor (Alt. Set. 0) */
+    0x09,                            // Size of the descriptor, in bytes (bLength)
+    USB_DESCRIPTOR_INTERFACE,        // INTERFACE descriptor type (bDescriptorType)
+    1,	 // Interface Number  (bInterfaceNumber)
+    0x00,                            // Alternate Setting Number (bAlternateSetting)
+    0x00,                            // Number of endpoints in this intf (bNumEndpoints)
+    USB_AUDIO_CLASS_CODE,            // Class code  (bInterfaceClass)
+    USB_AUDIO_AUDIOSTREAMING,        // Subclass code (bInterfaceSubclass)
+    0x00,                            // Protocol code  (bInterfaceProtocol)
+    0x00,                            // Interface string index (iInterface)
+
+    /* USB Speaker Standard AS Interface Descriptor (Alt. Set. 1) */
+    0x09,                            // Size of the descriptor, in bytes (bLength)
+    USB_DESCRIPTOR_INTERFACE,        // INTERFACE descriptor type (bDescriptorType)
+    1,	 // Interface Number  (bInterfaceNumber)
+    0x01,                            // Alternate Setting Number (bAlternateSetting)
+    0x01,                            // Number of endpoints in this intf (bNumEndpoints)
+    USB_AUDIO_CLASS_CODE,            // Class code  (bInterfaceClass)
+    USB_AUDIO_AUDIOSTREAMING,        // Subclass code (bInterfaceSubclass)
+    0x00,                            // Protocol code  (bInterfaceProtocol)
+    0x00,                            // Interface string index (iInterface)
+
+    /*  USB Speaker Class-specific AS General Interface Descriptor */
+    0x07,                           // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,     	// CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_AS_GENERAL,    		// GENERAL subtype (bDescriptorSubtype)
+    0x01,           				// Unit ID of the Output Terminal.(bTerminalLink)
+    0x01,                           // Interface delay. (bDelay)
+    0x01,0x00,                      // PCM Format (wFormatTag)
+
+    /*  USB Speaker Type 1 Format Type Descriptor */
+    0x0B,                           // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_INTERFACE,     	// CS_INTERFACE Descriptor Type (bDescriptorType)
+    USB_AUDIO_FORMAT_TYPE ,         // FORMAT_TYPE subtype. (bDescriptorSubtype)
+    0x01,                           // FORMAT_TYPE_1. (bFormatType)
+    0x02,                           // two channel.(bNrChannels)
+    0x02,                           // 2 byte per audio subframe.(bSubFrameSize)
+    0x10,                           // 16 bits per sample.(bBitResolution)
+    0x01,                           // One frequency supported. (bSamFreqType)
+    0x80,0xBB,0x00,                 // Sampling Frequency = 48000 Hz(tSamFreq)
+
+    /*  USB Speaker Standard Endpoint Descriptor */
+    0x09,                            // Size of the descriptor, in bytes (bLength)
+    USB_DESCRIPTOR_ENDPOINT,         // ENDPOINT descriptor (bDescriptorType)
+    1 | USB_EP_DIRECTION_OUT,                            // Endpoint1:OUT (bEndpointAddress)
+    0x09,                            /* ?(bmAttributes) Isochronous,
+                                      * Adaptive, data endpoint */
+    (192),0x00,                      // ?(wMaxPacketSize) //48 * 4
+    0x01,                            // One packet per frame.(bInterval)
+    0x00,                            // Unused. (bRefresh)
+    0x00,                            // Unused. (bSynchAddress)
+
+    /* USB Speaker Class-specific Isoc. Audio Data Endpoint Descriptor*/
+    0x07,                            // Size of the descriptor, in bytes (bLength)
+    USB_AUDIO_CS_ENDPOINT,           // CS_ENDPOINT Descriptor Type (bDescriptorType)
+    USB_AUDIO_EP_GENERAL,            // GENERAL subtype. (bDescriptorSubtype)
+    0x00,                            /* No sampling frequency control, no pitch
+                                        control, no packet padding.(bmAttributes)*/
+    0x00,                            // Unused. (bLockDelayUnits)
+    0x00,0x00,                       // Unused. (wLockDelay)
+
+
+
+
+};
+
+/*******************************************
+ * Array of Full speed Configuration 
+ * descriptors
+ *******************************************/
+USB_DEVICE_CONFIGURATION_DESCRIPTORS_TABLE fullSpeedConfigDescSet[1] =
+{
+    fullSpeedConfigurationDescriptor
+};
+
+
+/**************************************
+ *  String descriptors.
+ *************************************/
+ /*******************************************
+ *  Language code string descriptor
+ *******************************************/
+    const struct
+    {
+        uint8_t bLength;
+        uint8_t bDscType;
+        uint16_t string[1];
+    }
+    sd000 =
+    {
+        sizeof(sd000),                                      // Size of this descriptor in bytes
+        USB_DESCRIPTOR_STRING,                              // STRING descriptor type
+        {0x0409}                                            // Language ID
+    };
+/*******************************************
+ *  Manufacturer string descriptor
+ *******************************************/
+    const struct
+    {
+        uint8_t bLength;                                    // Size of this descriptor in bytes
+        uint8_t bDscType;                                   // STRING descriptor type
+        uint16_t string[25];                                // String
+    }
+    sd001 =
+    {
+        sizeof(sd001),
+        USB_DESCRIPTOR_STRING,
+        {'M','i','c','r','o','c','h','i','p',' ','T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'}
+		
+    };
+
+/*******************************************
+ *  Product string descriptor
+ *******************************************/
+	const struct
+    {
+        uint8_t bLength;                                    // Size of this descriptor in bytes
+        uint8_t bDscType;                                   // STRING descriptor type
+        uint16_t string[27];                                // String
+    }
+    sd002 =
+    {
+        sizeof(sd002),
+        USB_DESCRIPTOR_STRING,
+		{'H','a','r','m','o','n','y',' ','U','S','B',' ','H','e','a','d','s','e','t',' ','E','x','a','m','p','l','e'}
+    }; 
+
+/***************************************
+ * Array of string descriptors
+ ***************************************/
+USB_DEVICE_STRING_DESCRIPTORS_TABLE stringDescriptors[3]=
+{
+    (const uint8_t *const)&sd000,
+    (const uint8_t *const)&sd001,
+    (const uint8_t *const)&sd002,
+};
+
+/*******************************************
+ * USB Device Layer Master Descriptor Table 
+ *******************************************/
+ 
+const USB_DEVICE_MASTER_DESCRIPTOR usbMasterDescriptor =
+{
+    &deviceDescriptor,                                      // Full speed descriptor
+    1,                                                      // Total number of full speed configurations available
+    fullSpeedConfigDescSet,                                 // Pointer to array of full speed configurations descriptors
+	NULL, 
+	0,
+	NULL,
+	3,  													// Total number of string descriptors available.
+    stringDescriptors,                                      // Pointer to array of string descriptors.
+	NULL, 
+	NULL
+};
+
+
+/****************************************************
+ * USB Device Layer Initialization Data
+ ****************************************************/
+
+const USB_DEVICE_INIT usbDevInitData =
+{
+    /* Number of function drivers registered to this instance of the
+       USB device layer */
+    .registeredFuncCount = 1,
+	
+    /* Function driver table registered to this instance of the USB device layer*/
+    .registeredFunctions = (USB_DEVICE_FUNCTION_REGISTRATION_TABLE*)funcRegistrationTable,
+
+    /* Pointer to USB Descriptor structure */
+    .usbMasterDescriptor = (USB_DEVICE_MASTER_DESCRIPTOR*)&usbMasterDescriptor,
+
+    /* USB Device Speed */
+	.deviceSpeed =  USB_SPEED_FULL,
+	
+	/* Index of the USB Driver to be used by this Device Layer Instance */
+    .driverIndex = DRV_USBFSV1_INDEX_0,
+
+    /* Pointer to the USB Driver Functions. */
+    .usbDriverInterface = DRV_USBFSV1_DEVICE_INTERFACE,
+	
+};
+// </editor-fold>
